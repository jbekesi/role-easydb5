- include_tasks: checks.yml

- name: configuring APT proxy
  when: easydb_proxy_url
  include_tasks: proxy.yml

- name: installing Python docker bindings
  apt:
    pkg: python-docker
    state: present
    update_cache: no
    install_recommends: no

- name: logging in to docker registry
  docker_login:
    registry: "{{ easydb_docker_registry }}"
    username: "{{ easydb_docker_user }}"
    password: "{{ easydb_docker_pass }}"
    reauthorize: yes

- name: adjusting sysctl max-map-count
  sysctl:
    name: vm.max_map_count
    value: "{{ easydb_max_map_count }}"
    reload: yes

- name: easydb directories under {{ easydb_basedir }}
  file:
    state: directory
    path: "{{ file_item.path }}"
    owner: "{{ file_item.owner | default('root') }}"
    group: "{{ file_item.group | default('root') }}"
    mode: "{{ file_item.mode | default(0755) }}"
  loop_control:
    loop_var: file_item
  with_items:
    - path: "{{ easydb_basedir }}"
    - path: "{{ easydb_volume_config }}"
    - path: "{{ easydb_eas_volume_assets }}"
      owner: www-data
      group: www-data
    - path: "{{ easydb_eas_volume_log }}"
    - path: "{{ easydb_eas_volume_tmp }}"
      mode: u=rwx,g=rwx,o=rwx,o+t
    - path: "{{ easydb_elasticsearch_volume_var }}"
      mode: u=rwx,g=rwx,o=rwx
    - path: "{{ easydb_pgsql_volume_backup }}"
    - path: "{{ easydb_pgsql_volume_etc }}"
    - path: "{{ easydb_pgsql_volume_lib }}"
    - path: "{{ easydb_pgsql_volume_log }}"
    - path: "{{ easydb_server_volume_nginx_log }}"
      mode: u=rwx,g=rwx,o=rwx
    - path: "{{ easydb_server_volume_var }}"
    - path: "{{ easydb_server_volume_hotfolder }}"

- name: installing maintain script
  template:
    src: srv/easydb/maintain
    dest: "{{ easydb_basedir }}/maintain"
    owner: root
    group: root
    mode: 0755

- name: creating initial configuration file
  template:
    src: srv/easydb/config/easydb5-master.yml.j2
    dest: "{{ easydb_basedir }}/config/easydb5-master.yml"
    owner: root
    group: root
    mode: u=rw,g=r,o=r

# Flush handlers now so the docker daemon doesn't restart immediatly after the instances have started.
- meta: flush_handlers

- name: configuring logrotation for main easydb5 server log file
  template:
    src: etc/logrotate.d/easydb
    dest: /etc/logrotate.d/easydb
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: creating easydb5 docker network
  docker_network:
    name: "{{ easydb_container_network }}"

- name: spinning up docker-containers
  docker_container:
    name: "easydb-{{ easydb_container_item.key }}"
    image: "{{ easydb_container_item.value.image }}"
    networks:
      - name: "{{ easydb_container_network }}"
    restart_policy: "{{ easydb_container_item.value.restart_policy | default('always') }}"
    ports: "{{ easydb_container_item.value.ports | default([]) }}"
    volumes: "{{ easydb_container_item.value.volumes | default([]) }}"
    capabilities: "{{ easydb_container_item.value.capabilities | default([]) }}"
  loop_control:
    loop_var: easydb_container_item
  with_dict: "{{ easydb_containers }}"

- name: deploying run-scripts
  template:
    src: srv/easydb/run-script.j2
    dest: "{{ easydb_basedir }}/run-{{ easydb_container_item.key }}.sh"
    owner: root
    group: root
    mode: 0755
  loop_control:
    loop_var: easydb_container_item
  with_dict: "{{ easydb_containers }}"

- name: configuring easydb cron-jobs
  template:
    src: etc/cron.d/easydb5
    dest: /etc/cron.d/easydb5
    owner: root
    group: root
    mode: u=rw,g=r,o=r

#- debug:
#    var: output
